#!/usr/bin/env tclsh

#set argv {odfi/show odfi}
set argv info
set argv {install eda/hdl/rfg3}

set argv {duckdoc --info}
#puts "Test: $argv"
set argv {install eda/utils}
set argv info
set argv duckdoc/serveModules
set argv update
set argv scm/isClean

## Puts override to handle adding comment marker to beginning of line
set putsPrefix "#"
proc pPuts args {
    ::puts ${::putsPrefix}[lindex $args end]
}

#puts "A: [array get env]" 

#exit

## Arguments
#######################
set version 3.0.0

proc isArgument arg {
    set argIndex [lsearch -exact $::argv $arg]
    if {$argIndex!=-1} {
        return true
    }
}

proc consumeArgument {argName script} {
    
    set argIndex [lsearch -exact $::argv $argName]
    if {$argIndex!=-1} {
    
        ## take value if necessary
        ## and remove arg from argv
        set val true
        if {[string match "--*" $argName]} {
            set val [lindex $::argv [expr $argIndex +1]]
            uplevel set argValue $val
            
            set ::argv [lreplace $::argv $argIndex [expr $argIndex +1]]
        } else {
            set ::argv [lreplace $::argv $argIndex $argIndex]
        }   
        
        uplevel $script
       
        
        return $val
    }
    
    return false
}

## Remove all -xxx and --xxx arguments before the first non config argument in argv list
proc removeConfigArguments args {

    set stop false
    while {!$stop} {
        
        set firstArg [lindex $::argv 0]
        if {$firstArg=="" || ![string match "-*" $firstArg]} {
            set stop true
        } else {
            
            ## Remove arg
            set ::argv [lreplace $::argv 0 0]
            
            ## If "--" then remove the next argument as well
            if {[string match "--*" $firstArg]} {
                set ::argv [lreplace $::argv 0 0]
            }
        }
    
    }
}

## Welcome
########################

set asciiLogo {
 ██████╗ ██████╗ ███████╗██╗
 ██╔═══██╗██╔══██╗██╔════╝██║
 ██║   ██║██║  ██║█████╗  ██║
 ██║   ██║██║  ██║██╔══╝  ██║
 ╚██████╔╝██████╔╝██║     ██║
  ╚═════╝ ╚═════╝ ╚═╝     ╚═╝  
}




## Version and stat
#################
consumeArgument -info {
    
    puts "ODFI Version: $version"
    puts "TCL Version: [info tclversion]"

}

## Load Private Dependencies
##  - Use explicit sourcing here to avoid environment hack with normal installation
#####################

set managerHome [file normalize [file dirname [info script]]/../]

set dependencies {

    odfi::closures 3.0.0 https://github.com/unihd-cag/odfi-dev-tcl.git odfi-dev-tcl tcl/pkgIndex.tcl

}

foreach {p version sources outPath indexFile} $dependencies {
    
    if {[catch {package require $p $version}]} {
        if {![file exists $managerHome/private/$outPath] && [catch {puts [exec git clone $sources  $managerHome/private/$outPath]} res]} {
            error "Could not load package $p , and cloning sources failed: $res"
        }
        source $managerHome/private/$outPath/$indexFile
    }
}

## Load language definition
source $managerHome/private/odfi.tm


## Create Default ODFI Instance
###################
set odfi [::odfi::odfi default]

## Create Default Configs
#######################

#### Main Config is the tools installation ########

set defaultConfig [$odfi getConfig main]

## Main Tool COnfig
foreach confFile [glob -nocomplain $managerHome/*.config.tcl] {
    #$odfi config $confFile
    $defaultConfig apply  {
        source $confFile
    }
}

## Load all the repostiory descriptions
foreach repoFile [glob -nocomplain $managerHome/repositories/*.repo.tcl] {
    #$odfi config $confFile
    $defaultConfig apply  {
        source $repoFile
    }
}


#### User config ####
set userConfig [$odfi config user {

    :installPath set ${::env(HOME)}/.odfi/install
    
    foreach userConfigFile [global -nocomplain -directory $::env(HOME)/.odfi/ *.module.tcl] {
        source $userConfigFile
    }
    
}]



## Get all modules
$odfi gatherModules

## Start
########

## don't put logo on windows
if {![::odfi::os::isWindows]} {
    pPuts $asciiLogo
}


## Consume all arguments until first one is a non configuration argument
removeConfigArguments

## Remaining Command

set mainCommand [lindex $::argv 0]

pPuts "Main Command: $mainCommand -> $::argv"

$odfi runCommand $mainCommand [lrange $::argv 1 end]

