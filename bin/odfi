#!/usr/bin/env tclsh

## Load Private Dependencies
##  - Use explicit sourcing here to avoid environment hack with normal installation
#####################

set managerHome [file normalize [file dirname [info script]]/../]

#### ODFI Dev TCL
source $managerHome/private/odfi-dev-tcl/tcl/common.tm
source $managerHome/private/odfi-dev-tcl/tcl/git-1.0.0.tm
source $managerHome/private/odfi-dev-tcl/tcl/closures-2.0.0.tm
source $managerHome/private/odfi-dev-tcl/tcl/list-2.0.0.tm
source $managerHome/private/odfi-dev-tcl/tcl/tool-1.0.0.tm
source $managerHome/private/odfi-dev-tcl/tcl/os-1.0.0.tm

## Local definitions
source $managerHome/private/module.tm

## Load ODFI configuration (config and installed modules)
####################
::new odfi::manager::ODFI odfi $managerHome



## Go on
################
odfi::tool::describe {

	set description "

Odfi Module Manager:

	- Install/Update module
	- Load modules to environment
"

	argument info optional description "Provide some general infos about installation"

	argument list optional description "List available modules, versions and installed one"

	argument load optional description "Load installation"

	argument install type string optional description "Install or update a module"

	argument update optional description "Tries to Update all the modules"

	argument setup type string optional description "Call setup on specified module name"

	argument clone optional description "Clone"


}

tool parseArguments


#### Info
##########################
if {$info} {

	## Current Version
	##############
	odfi::common::println "Current Version: [odfi::git::current-branch $managerHome]"


	#### List
	##########################
	puts "Listing available modules:"
	odfi::common::printlnIndent
	odfi eachModule {

		odfi::common::println "Module : [$module name]"

		odfi::common::printlnIndent

		## Basic Infos
		odfi::common::println "- URL: [$module url]"

		## Installation paths
		#############
		if {[$module isInstalled]} {
			odfi::common::println "- Installed: yes"

			set installedModule [$module getInstalledModule]
			$installedModule printInfos



		} else {
			odfi::common::println "- Installed: no"
		}

		odfi::common::printlnOutdent


	}

	odfi::common::printlnOutdent

	exit 1
}



#### Update
#####################
if {$update} {

	odfi::common::println "Updating modules"
	odfi::common::printlnIndent
	foreach installedModule [itcl::find objects -class odfi::manager::InstalledModule] {

		odfi::common::println "- [$installedModule name]"
		$installedModule update

	}
	odfi::common::printlnOutdent

	## Check argument validity
	###########
	if {[llength [itcl::find objects $install]]==0} {

		odfi::common::println "Module $install is not present in config file..."
		exit 0
	}


	## Update/Install
	#####################
	$install update


	exit 1

}

#### Install
#####################
if {$install!=false} {

	odfi::common::println "Installing module: $install"

	## Check argument validity
	###########
	if {[llength [itcl::find objects $install]]==0} {

		odfi::common::println "Module $install is not present in config file..."
		exit 0
	}


	## Update/Install
	#####################
	$install update


	exit 1

}


#### Setup
#####################
if {$setup!=false} {

	odfi::common::println "Setup module: $setup"

	## Check argument validity
	###########
	if {[llength [itcl::find objects $setup]]==0} {

		odfi::common::println "Module $setup is not present in config file..."
		exit 0
	}
	if {[llength [itcl::find objects ${setup}.installed]]==0} {

		odfi::common::println "Module $setup is not installed..."
		exit 0
	}

	${setup}.installed doSetup


	exit 1

}

#### Load
#####################
if {$load} {

	puts "Loading ODFI"


	## Load Modules
	##############################""
	odfi::manager::LoadResult loadResult

	foreach installedModule [itcl::find objects ::*.installed] {

		## Call Load on module
		################
		$installedModule doLoad loadResult

	}

	## Output result to underlying command line
	############
	puts "Load res: [loadResult toBash]"


	exit 1
}


#### Clone
####################
if {$clone} {

	puts "
WARNING: This will duplicate this module manager to specified location
This feature is intended for developer who want to locally override a module installation
"

	exit 1

}


tool usage
