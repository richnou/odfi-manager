#!/usr/bin/env tclsh

## Load Private Dependencies
##  - Use explicit sourcing here to avoid environment hack with normal installation
#####################

set managerHome [file normalize [file dirname [info script]]/../]

#### ODFI Dev TCL
if {![file exists $managerHome/private/odfi-dev-tcl/]} {

	puts "
# Private Dependency ODFI dev tcl is missing.
# Trying to clone using command line call -> This is the only way to solve that for now.
# It this failes, simply install the master version there: $managerHome/private/odfi-dev-tcl
"
    catch {puts [exec git clone http://lebleu/gitlab/odfi/odfi-dev-tcl.git  $managerHome/private/odfi-dev-tcl]}

}

source $managerHome/private/odfi-dev-tcl/tcl/common.tm
source $managerHome/private/odfi-dev-tcl/tcl/git-1.0.0.tm
source $managerHome/private/odfi-dev-tcl/tcl/closures-2.0.0.tm
source $managerHome/private/odfi-dev-tcl/tcl/list-2.0.0.tm
source $managerHome/private/odfi-dev-tcl/tcl/tool-1.0.0.tm
source $managerHome/private/odfi-dev-tcl/tcl/os-1.0.0.tm

## Local definitions
source $managerHome/private/module.tm

## Load ODFI configuration (config and installed modules)
####################
::new odfi::manager::ODFI odfi.local $managerHome



## Go on
################
odfi::tool::describe {

	set description "

Odfi Module Manager:

	- Install/Update module
	- Load modules to environment
"

	argument info optional description "Provide some general infos about installation"

	argument list optional description "List available modules, versions and installed one"

	argument load optional description "Load installation"

	argument install type string optional description "Install or update a module"

	argument update optional description "Tries to Update all the modules"

	argument setup type string optional description "Call setup on specified module name"

	argument clone optional description "Clone"


}

tool parseArguments


#### Info
##########################
if {$info} {

	## Print General Infos
	###########################
	odfi.local printInfos


	## Show Resolved list
	##############################
	odfi::common::println "- Resolved installed modules list for load:"

	odfi::common::printlnIndent
	foreach installedModule [odfi.local resolveInstalledModules] {


		odfi::common::println "- $installedModule"

	}
	odfi::common::printlnOutdent

	exit 1
}



#### Update
#####################
if {$update} {

	odfi::common::println "Updating modules"
	odfi::common::printlnIndent
	foreach installedModule [itcl::find objects -class odfi::manager::InstalledModule] {

		odfi::common::println "- [$installedModule name]"
		$installedModule update

	}
	odfi::common::printlnOutdent

	## Check argument validity
	###########
	if {[llength [itcl::find objects $install]]==0} {

		odfi::common::println "Module $install is not present in config file..."
		exit 0
	}


	## Update/Install
	#####################
	$install update


	exit 1

}

#### Install
#####################
if {$install!=false} {

	odfi::common::println "Installing module: $install"

	## Check argument validity
	###########

	set moduleDefinition [lindex [itcl::find objects "$install" -class odfi::manager::Module] 0]

	if {$moduleDefinition==""} {

		odfi::common::println "Module $install is not present in config file..."
		exit 0
	}




	## Update/Install
	#####################
	$moduleDefinition update


	exit 1

}


#### Setup
#####################
if {$setup!=false} {

	odfi::common::println "Setup module: $setup"

	## Check argument validity
	###########
	if {[llength [itcl::find objects $setup]]==0} {

		odfi::common::println "Module $setup is not present in config file..."
		exit 0
	}
	if {[llength [itcl::find objects ${setup}.installed]]==0} {

		odfi::common::println "Module $setup is not installed..."
		exit 0
	}

	${setup}.installed doSetup


	exit 1

}

#### Load
#####################
if {$load} {

	puts "#Loading ODFI"
	odfi::manager::LoadResult loadResult

	## Add The manager to bin
	###################
	loadResult env PATH $managerHome/bin

	## Load Modules
	##############################""


	foreach installedModule [odfi.local resolveInstalledModules] {

		## Call Load on module
		################
		$installedModule doLoad loadResult

	}

	## Output result to underlying command line
	############
	odfi::os::onOs {
		linux* {
			puts "[loadResult toBash]"
		}
	}



	exit 1
}


#### Clone
####################
if {$clone} {

	puts "
WARNING: This will duplicate this module manager to specified location
This feature is intended for developer who want to locally override a module installation
"

	## Prepare location
	###########################
	set location [pwd]/modules-manager
	puts "Clone location: $location"

	## Ask
	puts "Do you want to continue ? (y/n)"
	switch -glob -- [gets stdin] {

		yes -
		y {

			## Get origin
			set cloneURL $managerHome

			## Cloning
			puts ""
			puts "Cloning Manager from $cloneURL"
			odfi::git::clone $cloneURL $location

			## Create config file for parent
			set parentConfigFile [open $location/odfi.parent.config "w+"]
			puts $parentConfigFile "
## Config from clone operation to set source manager from $managerHome as parent
parent central $managerHome
"

			## Boostrap
			odfi::os::onOs {
				linux* {
					exec bash $location/setup.linux.bash
				}
			}

		}
		default {
			puts "Aborting."
		}
	}


	exit 1

}


tool usage
